#!/usr/bin/env ruby
#
# - parse search phrase (fuzzy, exact, regex, type,...)
# - get all candidates (async?)
# - score all candidates
# - update sorted outputs as data becomes available (?)
#

require 'pathname'; module Kernel; def require_r(p) require File.join(File.dirname(Pathname.new(caller[0].gsub(/:[^\/]+$/,'')).realpath),p) end end

begin
require_r '../lib/shorthand.rb'
require_r '../lib/vim.rb'
require   'thread'

#$pwd = Path.pwd

module FastFind
  class Res
    attr_reader :size
    def initialize
      @files = {}
      @size  = 0
    end

    def add(v)
      p = v.delete(:path).abs($pwd).rel($pwd).to_s
      @files[p] ||= {}
      @files[p].merge!(v){|k,ov,nv| ov+nv}
      @size += 1
    end

    def ordered
      #$stderr.puts @files.pretty_inspect
      @files.sort_by{|k,r| - r.values.reduce(:+)}
      #@files.sort_by{|k,ra| - ra.reduce(0){|a,v| a + v[v.keys[0]]}}
    end

    def [](sel) ordered[sel] end

    alias_method :<<, :add
  end

  class FastFinder
    attr_reader :opts, :pwd, :phrase, :rfile

    def self.register_plugin(klass, types)
      @@plugins ||= {}
      [*types].each{|t| @@plugins[t] ||= []; @@plugins[t] << klass}
    end

    def initialize(phrase_so_far, wd=nil, related_file=nil)
      @opts        = Set[]

      @pwd         = wd || Path.pwd
      @pwd         = @pwd.real
      Dir.chdir      @pwd
      $pwd         = @pwd
      @rfile       = related_file
      @phrase      = phrase_so_far
      @opts       << :fuzzy

      @final       = FastFind::Res.new

      @raw_results = Queue.new
      @scored_res  = Queue.new
    end

    def fast_find
      @scorers     = @@plugins[:scorer].map{|s| [qto=Queue.new,s.new(self,qto,@scored_res)]}
      @finders     = @@plugins[:finder].amap(:new,self,@scorers.amap(:[],0),@phrase)
      @reporter    = Thread.new{reporting_loop}

      @finders.each{|f|    f.thread.join}
      @scorers.each{|iq,s| iq << :eof   }
      @scorers.each{|iq,s| s.thread.join}
      @scored_res << :eof
      @reporter.join
    end

    def phrase() @phrase end

    def reporting_loop
      last_reported = Time.now - 0.85
      last_count    = 0
      while (new_item = @scored_res.pop) != :eof
        @final << new_item



        # TODO: reorganize, etc.
        if Time.now - last_reported > 1 && last_count < @final.size
          last_reported = Time.now
          last_count    = @final.size
          report_update
        end
      end
      report_update if @final.size > last_count
    end

    def report_update
      $stderr.puts '--------------'
      $stderr.puts @final[0..100].pretty_inspect
      $stderr.flush
    end
  end

  class FastFindPlugin
    attr_accessor :thread
    def self.ff_plugin(types) FastFind::FastFinder.register_plugin(self, types) end
  end

  class FastFindScorer < FastFindPlugin
    def initialize(parent_ff, in_queue, out_queue)
      @ff        = parent_ff
      @in_queue  = in_queue
      @out_queue = out_queue
      @thread    = Thread.new{run}
    end
    def run
      loop do
        item = @in_queue.pop
        break if item == :eof
        @out_queue << score_item(item)
      end
    end
    def score_item(item) throw 'Need to implement score_item!' end
  end

#------------------------------------------------------------------------------------------------

  # working directory
  # working project directory
  # vim working directory
  # vim working project directory


  class ClassicFind < FastFindPlugin
    ff_plugin :finder

    def initialize(parent_ff, res_queues, phrase)
      @ff         = parent_ff
      @res_queues = res_queues
      @phrase     = phrase
      @thread     = Thread.new{run}
    end

    def run
      if @ff.opts[:fuzzy]
        phrase = '*' + @phrase.each_char.to_a.join('*').gsub(/[a-z]/){|c| "[#{c}#{c.upcase}]"}+'*'
      else phrase = @phrase end
      IO.popen(['find','.','-type','f','-path',phrase.to_sh].join(' ')) do |find_io|
        find_io.each_line{|line| @res_queues.each{|q| q << {:path=>Path.new(line.strip)}}}
      end
    end
  end

#------------------------------------------------------------------------------------------------
  class BasicContextScore < FastFindScorer
    ff_plugin :scorer
    def initialize(parent_ff, in_queue, out_queue)
      # TODO: any setup
      super(parent_ff, in_queue, out_queue)
    end

    def score_item(item)
      p = item[:path]
      item[:path_dist] = 1.0 / (p.dist_from($pwd).to_f + 1.0)
      item[:visibility]= (p.to_s =~ /(\/|^)\.[^\/]+/  ?
                          (p.basename.to_s[0..0]=='.' ? -1.0 : 0.0) : 1.0)
      # TODO: same repo
      #      - parent repos
      #      - text similarity
      item
    end
  end

  class VimContextScore < FastFindPlugin
  end
end

#------------------------------------------------------------------------------------------------
ff = FastFind::FastFinder.new(ARGV[0], ARGV[1], ARGV[2])
ff.fast_find

rescue => exception
  puts exception
  puts exception.backtrace
end

